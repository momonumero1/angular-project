{"ast":null,"code":"import { State } from './state.enum';\nexport class Cell {\n  nextState() {\n    this.state++;\n    if (this.state >= State.Size) {\n      this.state = State.None;\n    }\n  }\n  constructor(previousGenerationState, state, rule) {\n    this.countALive = 0;\n    this.previousGenerationState = previousGenerationState;\n    this.state = state;\n    this.rule = rule;\n  }\n  isAlive() {\n    return this.state === State.ALive;\n  }\n  computeNextGenerationState(aliveNeighbors) {\n    // console.log(aliveNeighbors);\n    if (this.computeRule(this.rule, aliveNeighbors, this.isAlive())) {\n      this.nextGenerationState = State.ALive;\n    } else {\n      this.nextGenerationState = State.None;\n    }\n    if (this.state === State.ALive) {\n      this.countALive++;\n    }\n    // console.log(this);\n  }\n  shiftState() {\n    this.previousGenerationState = this.state;\n    this.state = this.nextGenerationState;\n    this.nextGenerationState = State.None;\n  }\n  computeRule(rule, aliveNeighbors, isALive) {\n    const law = rule.law;\n    const laws = law.split('/');\n    const bornLaw = laws[0];\n    const surviveLaw = laws[1];\n    const bornLawB = !isALive && bornLaw.split('').filter(n => parseInt(n, 10) === aliveNeighbors).length !== 0;\n    const bornLawS = isALive && surviveLaw.split('').filter(n => parseInt(n, 10) === aliveNeighbors).length !== 0;\n    return bornLawB || bornLawS;\n  }\n  changeRules(selectedRule) {\n    this.rule = selectedRule;\n  }\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}