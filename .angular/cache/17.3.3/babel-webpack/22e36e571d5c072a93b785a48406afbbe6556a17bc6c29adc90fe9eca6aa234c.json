{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, ViewChild } from '@angular/core';\nimport { interval } from 'rxjs';\nimport { State } from '../models/state.enum';\nlet BoardComponent = class BoardComponent {\n  constructor(boardService, templateService) {\n    this.boardService = boardService;\n    this.templateService = templateService;\n    this.speeds = [{\n      name: 'Rapide',\n      value: 100\n    }, {\n      name: 'Moyenne',\n      value: 250\n    }, {\n      name: 'Lente',\n      value: 500\n    }];\n    this.speed = {\n      name: 'Rapide',\n      value: 100\n    };\n    this.colorModes = [{\n      name: 'Classique'\n    }, {\n      name: 'Evolué'\n    }, {\n      name: 'HeatMap'\n    }];\n    this.colorMode = {\n      name: 'Classique'\n    };\n    this.categories = [];\n    this.running = false;\n    this.grid = [];\n    this.population = 0;\n    this.rulesStr = [];\n    this.selectedRuleStr = 'Conway';\n    this.generationNumber = 0;\n    this.maxHistoryValue = 0;\n  }\n  ngOnInit() {\n    /* PIXI\n    this.pApp = new PIXI.Application({ width: 600, height: 600 });\n    this.pixiContainer.nativeElement.appendChild(this.pApp.view);\n    const graphics = new PIXI.Graphics();\n         const Grid = defineGrid(extendHex({\n      size:50,\n      orientation: 'flat'\n    }));\n         document.body.appendChild(this.pApp.view);\n    // set a line style of 1px wide and color #999\n    graphics.lineStyle(1, 0x999999);\n         // render 10,000 hexes\n    Grid.rectangle({ width: 10, height: 10 }).forEach(hex => {\n        const point = hex.toPoint();\n        // add the hex's position to each of its corner points\n        const corners = hex.corners().map(corner => corner.add(point));\n        // separate the first from the other corners\n        const [firstCorner, ...otherCorners] = corners;\n             // move the \"pen\" to the first corner\n        graphics.moveTo(firstCorner.x, firstCorner.y);\n        // draw lines to the other corners\n        otherCorners.forEach(({ x, y }) => graphics.lineTo(x, y));\n        // finish at the first corner\n        graphics.lineTo(firstCorner.x, firstCorner.y);\n             this.pApp.stage.addChild(graphics);\n         });\n     \n    */\n    this.gridSubcription = this.boardService.boardSubject.subscribe(data => {\n      this.grid = data;\n      this.generationNumber++;\n      // compute population\n      // tslint:disable-next-line: no-shadowed-variable\n      const pop = this.grid.reduce((pop, row) => {\n        return pop + row.filter(cell => cell.isAlive()).length;\n      }, 0);\n      this.population = pop;\n      // compute max hystory for heatmap\n      const max = Math.max.apply(Math, this.grid.map(row => {\n        return Math.max.apply(Math, row.map(cell => {\n          return cell.countALive;\n        }));\n      }));\n      this.maxHistoryValue = max;\n      // console.log(data);\n    }, error => {\n      console.log(error);\n    });\n    this.templateSubcription = this.templateService.templateBoardsSubject.subscribe(data => {\n      this.templates = data;\n      this.categories = [];\n      this.templates.forEach(t => {\n        this.categories.push(t.category);\n      });\n      this.categories = this.categories.reduce((a, b) => {\n        if (a.indexOf(b) < 0) {\n          a.push(b);\n        }\n        return a;\n      }, []);\n      // console.log(this.categories);\n    }, error => {\n      console.log(error);\n    });\n    this.templateService.getAllTemplates();\n    this.rulesStr = this.boardService.getRules().map(r => r.name);\n    this.selectedRule = this.boardService.getRules().find(r => r.name === this.selectedRuleStr);\n    this.boardService.generateRandomBoard(30, 30, this.selectedRule);\n    this.generationNumber = 0;\n  }\n  ngOnDestroy() {\n    this.gridSubcription.unsubscribe();\n    if (this.counterSubscription != null) {\n      this.counterSubscription.unsubscribe();\n    }\n    this.templateSubcription.unsubscribe();\n  }\n  onToggleMouseOver(r, c, event) {\n    // console.log(event);\n    if (event.buttons === 1) {\n      this.boardService.toggle(r, c);\n      this.generationNumber = 0;\n    }\n  }\n  onToggleClick(r, c, event) {\n    // console.log(event);\n    this.boardService.toggle(r, c);\n    this.generationNumber = 0;\n  }\n  onRunAnimation() {\n    const counter = interval(this.speed.value);\n    this.counterSubscription = counter.subscribe(value => {\n      this.boardService.iterateGeneration();\n    }, error => {\n      console.log('Uh-oh, an error occurred! : ' + error);\n    }, () => {\n      console.log('Observable complete!');\n    });\n    this.running = true;\n  }\n  onStopAnimation() {\n    if (this.counterSubscription != null) {\n      this.counterSubscription.unsubscribe();\n    }\n    this.running = false;\n  }\n  onChangeAnimationSpeed() {\n    if (this.running) {\n      this.onStopAnimation();\n      this.onRunAnimation();\n    }\n  }\n  onClearBoard() {\n    if (this.running) {\n      this.onStopAnimation();\n    }\n    this.boardService.generatedEmptyBoard(100, 100, this.selectedRule);\n    this.generationNumber = 0;\n  }\n  onMenuTemplate(t) {\n    this.onStopAnimation();\n    // console.log(t);\n    this.boardService.generateTemplateBoard(t, this.selectedRule);\n  }\n  getCellColor(cell) {\n    if (this.colorMode != null) {\n      if (this.colorMode.name === 'Classique') {\n        return this.getClassicColor(cell);\n      }\n      if (this.colorMode.name === 'Evolué') {\n        return this.getEvolveColor(cell);\n      }\n      if (this.colorMode.name === 'HeatMap') {\n        return this.getHeatMapColor(cell);\n      }\n    }\n  }\n  getHeatMapColor(cell) {\n    const v = (1.0 - cell.countALive / this.maxHistoryValue) * 240;\n    // tslint:disable-next-line: prefer-const\n    let hal = 'hsl(' + v + ', 100%, 50%)';\n    return hal;\n  }\n  getEvolveColor(cell) {\n    if (cell.state === State.None) {\n      // dead\n      return 'white';\n    } else {\n      // alive\n      if (cell.previousGenerationState === State.None && cell.nextGenerationState === State.ALive) {\n        // borning\n        return 'green';\n      }\n      if (cell.previousGenerationState === State.None && cell.nextGenerationState === State.None) {\n        // live only 1 generation\n        return 'yellow';\n      }\n      if (cell.previousGenerationState === State.ALive && cell.nextGenerationState === State.None) {\n        // dying\n        return 'red';\n      }\n      if (cell.previousGenerationState === State.ALive && cell.nextGenerationState === State.ALive) {\n        // alive\n        return 'blue';\n      }\n    }\n  }\n  getClassicColor(cell) {\n    if (cell.state === State.None) {\n      // dead\n      return 'white';\n    } else {\n      // alive\n      return 'black';\n    }\n  }\n  onRuleChange() {\n    // console.log(this.selectedRule);\n    this.onStopAnimation();\n    this.boardService.changeRule(this.selectedRule);\n  }\n  onRuleChangeStr() {\n    // console.log(this.selectedRuleStr);\n    this.selectedRule = this.boardService.getRules().find(r => r.name === this.selectedRuleStr);\n    this.onStopAnimation();\n    this.boardService.changeRule(this.selectedRule);\n  }\n  onMouseOverCategory(cat) {\n    this.templatesFiltered = this.templates.filter(t => t.category === cat);\n  }\n};\n__decorate([ViewChild('pixiContainer', null)], BoardComponent.prototype, \"pixiContainer\", void 0);\nBoardComponent = __decorate([Component({\n  selector: 'gol-board',\n  templateUrl: './board.component.html',\n  styleUrls: ['./board.component.css']\n})], BoardComponent);\nexport { BoardComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}