{"ast":null,"code":"import { Cell } from '../models/cell.model';\nimport { Subject } from 'rxjs/internal/Subject';\nimport { State } from '../models/state.enum';\nimport { GameOfLifeRule } from '../models/rules.model';\nimport * as i0 from \"@angular/core\";\nexport let BoardService = /*#__PURE__*/(() => {\n  class BoardService {\n    constructor() {\n      this.boardSubject = new Subject();\n      this.board = [];\n    }\n    emitBoard() {\n      this.boardSubject.next(this.board.slice());\n    }\n    generateRandomBoard(height, width, rule) {\n      const generatedBoard = new Array();\n      // tslint:disable-next-line: variable-name\n      for (let _i = 0; _i < height; _i++) {\n        const row = new Array();\n        // tslint:disable-next-line: variable-name\n        for (let _j = 0; _j < width; _j++) {\n          row.push(new Cell(this.getRandomInt(0, 2), this.getRandomInt(0, 2), rule));\n        }\n        generatedBoard.push(row);\n      }\n      this.board = generatedBoard;\n      this.computeNextGeneration();\n      this.emitBoard();\n    }\n    generatedEmptyBoard(height, width, rule) {\n      const generatedBoard = new Array();\n      // tslint:disable-next-line: variable-name\n      for (let _i = 0; _i < height; _i++) {\n        const row = new Array();\n        // tslint:disable-next-line: variable-name\n        for (let _j = 0; _j < width; _j++) {\n          row.push(new Cell(State.None, State.None, rule));\n        }\n        generatedBoard.push(row);\n      }\n      this.board = generatedBoard;\n      this.computeNextGeneration();\n      // console.log(this.board);\n      this.emitBoard();\n    }\n    generateTemplateBoard(template, rule) {\n      // console.log(template);\n      const generatedBoard = new Array();\n      // tslint:disable-next-line: variable-name\n      for (let _i = 0; _i < template.height; _i++) {\n        const row = new Array();\n        // tslint:disable-next-line: variable-name\n        for (let _j = 0; _j < template.width; _j++) {\n          row.push(new Cell(0, template.grid[_i][_j], rule));\n        }\n        generatedBoard.push(row);\n      }\n      this.board = generatedBoard;\n      this.computeNextGeneration();\n      // console.log(this.board);\n      this.emitBoard();\n    }\n    getRandomInt(min, max) {\n      min = Math.ceil(min);\n      max = Math.floor(max);\n      return Math.floor(Math.random() * (max - min)) + min;\n    }\n    toggle(r, c) {\n      this.board[r][c].nextState();\n      this.computeNextGeneration();\n      this.emitBoard();\n    }\n    iterateGeneration() {\n      const boardHeight = this.board.length;\n      const boardWidth = this.board[0].length;\n      // console.log(this.board);\n      this.board.forEach(row => {\n        row.forEach(cell => cell.shiftState());\n      });\n      // console.log(this.board);\n      this.computeNextGeneration();\n      // console.log(this.board);\n      this.emitBoard();\n    }\n    computeNextGeneration() {\n      const boardHeight = this.board.length;\n      const boardWidth = this.board[0].length;\n      // tslint:disable-next-line: prefer-for-of\n      // tslint:disable-next-line: variable-name\n      for (let _i = 0; _i < boardHeight; _i++) {\n        // tslint:disable-next-line: prefer-for-of\n        // tslint:disable-next-line: variable-name\n        for (let _j = 0; _j < boardWidth; _j++) {\n          const neighbors = new Array();\n          // console.log(\"i=\" + _i +\",j=\" + _j);\n          for (let u = -1; u <= 1; u++) {\n            for (let v = -1; v <= 1; v++) {\n              if (!(u === 0 && v === 0) && _j + v >= 0 && _j + v < boardWidth && _i + u >= 0 && _i + u < boardHeight) {\n                neighbors.push(this.board[_i + u][_j + v]);\n              }\n            }\n          }\n          this.board[_i][_j].computeNextGenerationState(neighbors.filter(cell => cell.isAlive()).length);\n        }\n      }\n    }\n    getRules() {\n      return [this.getGameOfLifeRulesSpec(GameOfLifeRule.ConwayRule), this.getGameOfLifeRulesSpec(GameOfLifeRule.HighLifeRule)];\n    }\n    getGameOfLifeRulesSpec(gameOfLifeRule) {\n      switch (gameOfLifeRule) {\n        case GameOfLifeRule.ConwayRule:\n          return {\n            name: 'Conway',\n            law: 'B3/S23'\n          };\n        case GameOfLifeRule.HighLifeRule:\n          return {\n            name: 'HighLife',\n            law: 'B36/S23'\n          };\n      }\n    }\n    changeRule(selectedRule) {\n      this.board.forEach(row => {\n        row.forEach(cell => cell.changeRules(selectedRule));\n      });\n      this.computeNextGeneration();\n      this.emitBoard();\n    }\n    static #_ = this.ɵfac = function BoardService_Factory(t) {\n      return new (t || BoardService)();\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: BoardService,\n      factory: BoardService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return BoardService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}